fiber = require('fiber')
---
...
test_run = require('test_run').new()
---
...
fio = require('fio')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function create_script(name, code)
    local path = fio.pathjoin(fio.tempdir(), name)
    local script = fio.open(path, {'O_CREAT', 'O_WRONLY'},
        tonumber('0777', 8))
    assert(script ~= nil, ("assertion: Failed to open '%s' for writing"):format(path))
    script:write(code)
    script:close()
    return path
end;
---
...
code_template = "box.cfg{ listen = %s, server_id = %s } "..
		"box.schema.user.grant('guest', 'read,write,execute', 'universe') "..
		"space = box.schema.space.create('test', { engine = 'vinyl' })"..
		"pk = space:create_index('primary')"..
		"require('console').listen(os.getenv('ADMIN'))";
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
tmp1 = create_script('host1.lua', code_template:format(33130, 1))
---
...
tmp2 = create_script('host2.lua', code_template:format(33131, 2))
---
...
tmp3 = create_script('host3.lua', code_template:format(33132, 3))
---
...
--
-- Create shard instances.
--
test_run:cmd(("create server host1 with script='%s'"):format(tmp1))
---
- true
...
test_run:cmd(("create server host2 with script='%s'"):format(tmp2))
---
- true
...
test_run:cmd(("create server host3 with script='%s'"):format(tmp3))
---
- true
...
test_run:cmd("start server host1")
---
- true
...
test_run:cmd("start server host2")
---
- true
...
test_run:cmd("start server host3")
---
- true
...
--
-- Connect one to each other.
--
---------------- Host 1 ----------------
test_run:cmd('switch host1')
---
- true
...
fiber = require('fiber')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
box.cfg{
	cluster = {
		shard1 = { uri = 'localhost:33130' },
		shard2 = { uri = 'localhost:33131' },
		shard3 = { uri = 'localhost:33132' },
	}
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.cfg.server_id == box.info.server.id
---
- true
...
box.cfg.server_id
---
- 1
...
box.cfg.cluster.shard1.state
---
- active
...
box.cfg.cluster.shard2.state
---
- active
...
box.cfg.cluster.shard3.state
---
- active
...
---------------- Host 2 ----------------
test_run:cmd('switch host2')
---
- true
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
box.cfg{
	cluster = {
		shard1 = { uri = 'localhost:33130' },
		shard2 = { uri = 'localhost:33131' },
		shard3 = { uri = 'localhost:33132' },
	}
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.cfg.server_id == box.info.server.id
---
- true
...
box.cfg.server_id
---
- 2
...
box.cfg.cluster.shard1.state
---
- active
...
box.cfg.cluster.shard2.state
---
- active
...
box.cfg.cluster.shard3.state
---
- active
...
---------------- Host 3 ----------------
test_run:cmd('switch host3')
---
- true
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
box.cfg{
	cluster = {
		shard1 = { uri = 'localhost:33130' },
		shard2 = { uri = 'localhost:33131' },
		shard3 = { uri = 'localhost:33132' },
	}
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.cfg.server_id == box.info.server.id
---
- true
...
box.cfg.server_id
---
- 3
...
box.cfg.cluster.shard1.state
---
- active
...
box.cfg.cluster.shard2.state
---
- active
...
box.cfg.cluster.shard3.state
---
- active
...
---------------- Make two-phase transaction ----------------
test_run:cmd('switch host1')
---
- true
...
cluster = box.cfg.cluster
---
...
cluster.shard1:begin_two_phase()
---
- true
...
cluster.shard2:begin_two_phase()
---
- true
...
cluster.shard3:begin_two_phase()
---
- true
...
cluster.shard1.space.test:replace({1})
---
- [1]
...
cluster.shard2.space.test:replace({2})
---
- [2]
...
cluster.shard3.space.test:replace({3})
---
- [3]
...
box.space._transaction:select{}
---
- []
...
cluster.shard1:prepare()
---
- true
...
box.space._transaction:select{}
---
- - [120, 1, 'prepare', 1]
...
cluster.shard2:prepare()
---
- true
...
box.space._transaction:select{}
---
- - [120, 1, 'prepare', 2]
...
cluster.shard3:prepare()
---
- true
...
box.space._transaction:select{}
---
- - [120, 1, 'prepare', 3]
...
cluster.shard1:commit()
---
- true
...
cluster.shard2:commit()
---
- true
...
cluster.shard3:commit()
---
- true
...
cluster.shard1.space._transaction:select{}
---
- []
...
cluster.shard2.space._transaction:select{}
---
- []
...
cluster.shard3.space._transaction:select{}
---
- []
...
cluster.shard1.space.test:select{}
---
- - [1]
...
cluster.shard2.space.test:select{}
---
- - [2]
...
cluster.shard3.space.test:select{}
---
- - [3]
...
---------------- Fail prepare of two phase transaction ----------------
cluster.shard3.space.test:replace({6})
---
- [6]
...
cluster.shard1:begin_two_phase()
---
- true
...
cluster.shard2:begin_two_phase()
---
- true
...
cluster.shard3:begin_two_phase()
---
- true
...
cluster.shard1.space.test:replace({4})
---
- [4]
...
cluster.shard2.space.test:replace({5})
---
- [5]
...
cluster.shard3.space.test:update({6}, {{'!', 2, 6}})
---
- [6, 6]
...
-- Implicitly abort the subtransaction on the shard3.
f = fiber.create(function() cluster.shard3.space.test:replace({6, 6, 6}) end)
---
...
while f:status() ~= 'dead' do fiber.yield() end
---
...
cluster.shard1:prepare()
---
- true
...
cluster.shard2:prepare()
---
- true
...
status, err = pcall(cluster.shard3.prepare, cluster.shard3) -- must fail
---
...
status
---
- false
...
err
---
- Transaction has been aborted by conflict
...
cluster.shard1:rollback()
---
- true
...
cluster.shard2:rollback()
---
- true
...
-- cluster.shard3:rollback() -- already aborted.
cluster.shard1.space._transaction:select{}
---
- []
...
cluster.shard2.space._transaction:select{}
---
- []
...
cluster.shard3.space._transaction:select{}
---
- []
...
cluster.shard1.space.test:select{}
---
- - [1]
...
cluster.shard2.space.test:select{}
---
- - [2]
...
cluster.shard3.space.test:select{}
---
- - [3]
  - [6, 6, 6]
...
test_run:cmd('switch default')
---
- true
...
test_run:cmd("stop server host1")
---
- true
...
test_run:cmd("cleanup server host1")
---
- true
...
test_run:cmd("stop server host2")
---
- true
...
test_run:cmd("cleanup server host2")
---
- true
...
test_run:cmd("stop server host3")
---
- true
...
test_run:cmd("cleanup server host3")
---
- true
...
