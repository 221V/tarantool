test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
box.execute('pragma sql_default_engine=\''..engine..'\'')
---
- row_count: 0
...
-- create space
box.execute("CREATE TABLE t(id INT PRIMARY KEY)")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_bu BEFORE UPDATE ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_au AFTER UPDATE ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_bi BEFORE INSERT ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_ai AFTER INSERT ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_bd BEFORE DELETE ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
box.execute("CREATE TRIGGER tt_ad AFTER DELETE ON t FOR EACH ROW BEGIN SELECT 1; END")
---
- row_count: 1
...
-- check that these triggers exist
box.execute("SELECT \"name\", \"code\" FROM \"_trigger\"")
---
- metadata:
  - name: name
    type: string
  - name: code
    type: string
  rows:
  - ['TT_AD', 'CREATE TRIGGER tt_ad AFTER DELETE ON t FOR EACH ROW BEGIN SELECT 1;
      END']
  - ['TT_AI', 'CREATE TRIGGER tt_ai AFTER INSERT ON t FOR EACH ROW BEGIN SELECT 1;
      END']
  - ['TT_AU', 'CREATE TRIGGER tt_au AFTER UPDATE ON t FOR EACH ROW BEGIN SELECT 1;
      END']
  - ['TT_BD', 'CREATE TRIGGER tt_bd BEFORE DELETE ON t FOR EACH ROW BEGIN SELECT 1;
      END']
  - ['TT_BI', 'CREATE TRIGGER tt_bi BEFORE INSERT ON t FOR EACH ROW BEGIN SELECT 1;
      END']
  - ['TT_BU', 'CREATE TRIGGER tt_bu BEFORE UPDATE ON t FOR EACH ROW BEGIN SELECT 1;
      END']
...
-- drop table
box.execute("DROP TABLE t")
---
- row_count: 1
...
-- check that triggers were dropped with deleted table
box.execute("SELECT \"name\", \"code\" FROM \"_trigger\"")
---
- metadata:
  - name: name
    type: string
  - name: code
    type: string
  rows: []
...
