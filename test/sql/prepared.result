-- test-run result file version 2
remote = require('net.box')
 | ---
 | ...
test_run = require('test_run').new()
 | ---
 | ...
fiber = require('fiber')
 | ---
 | ...

-- Wrappers to make remote and local execution interface return
-- same result pattern.
--
test_run:cmd("setopt delimiter ';'")
 | ---
 | - true
 | ...
execute = function(...)
    local res, err = box.execute(...)
    if err ~= nil then
        error(err)
    end
    return res
end;
 | ---
 | ...
prepare = function(...)
    local res, err = box.prepare(...)
    if err ~= nil then
        error(err)
    end
    return res
end;
 | ---
 | ...
unprepare = function(...)
    local res, err = box.unprepare(...)
    if err ~= nil then
        error(err)
    end
    return res
end;
 | ---
 | ...
test_run:cmd("setopt delimiter ''");
 | ---
 | - true
 | ...

-- Test local interface and basic capabilities of prepared statements.
--
execute('CREATE TABLE test (id INT PRIMARY KEY, a NUMBER, b TEXT)')
 | ---
 | - row_count: 1
 | ...
space = box.space.TEST
 | ---
 | ...
space:replace{1, 2, '3'}
 | ---
 | - [1, 2, '3']
 | ...
space:replace{4, 5, '6'}
 | ---
 | - [4, 5, '6']
 | ...
space:replace{7, 8.5, '9'}
 | ---
 | - [7, 8.5, '9']
 | ...
s, e = prepare("SELECT * FROM test WHERE id = ? AND a = ?;")
 | ---
 | ...
assert(e == nil)
 | ---
 | - true
 | ...
assert(s ~= nil)
 | ---
 | - true
 | ...
s.query_id
 | ---
 | - 0
 | ...
s.metadata
 | ---
 | - - name: ID
 |     type: integer
 |   - name: A
 |     type: number
 |   - name: B
 |     type: string
 | ...
s.params
 | ---
 | - - name: '?'
 |     type: ANY
 |   - name: '?'
 |     type: ANY
 | ...
s.params_count
 | ---
 | - null
 | ...
execute(s.query_id, {1, 2})
 | ---
 | - metadata:
 |   - name: ID
 |     type: integer
 |   - name: A
 |     type: number
 |   - name: B
 |     type: string
 |   rows:
 |   - [1, 2, '3']
 | ...
execute(s.query_id, {1, 3})
 | ---
 | - metadata:
 |   - name: ID
 |     type: integer
 |   - name: A
 |     type: number
 |   - name: B
 |     type: string
 |   rows: []
 | ...
s:execute({1, 2})
 | ---
 | - metadata:
 |   - name: ID
 |     type: integer
 |   - name: A
 |     type: number
 |   - name: B
 |     type: string
 |   rows:
 |   - [1, 2, '3']
 | ...
s:execute({1, 3})
 | ---
 | - metadata:
 |   - name: ID
 |     type: integer
 |   - name: A
 |     type: number
 |   - name: B
 |     type: string
 |   rows: []
 | ...
s:unprepare()
 | ---
 | ...

-- Test preparation of different types of queries.
-- Let's start from DDL. It doesn't make much sense since
-- any prepared DDL statement can be executed once, but
-- anyway make sure that no crashes occur.
--
s = prepare("CREATE INDEX i1 ON test(a)")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("DROP INDEX i1 ON test;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("CREATE VIEW v AS SELECT * FROM test;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("DROP VIEW v;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("ALTER TABLE test RENAME TO test1")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 0
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

box.execute("CREATE TABLE test2 (id INT PRIMARY KEY);")
 | ---
 | - row_count: 1
 | ...
s = prepare("ALTER TABLE test2 ADD CONSTRAINT fk1 FOREIGN KEY (id) REFERENCES test2")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...
box.space.TEST2:drop()
 | ---
 | ...

s = prepare("CREATE TRIGGER tr1 INSERT ON test1 FOR EACH ROW BEGIN DELETE FROM test1; END;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("DROP TRIGGER tr1;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("DROP TABLE test1;")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - row_count: 1
 | ...
execute(s.query_id)
 | ---
 | - error: 'Failed to execute SQL statement: statement has expired'
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

-- DQL
--
execute('CREATE TABLE test (id INT PRIMARY KEY, a NUMBER, b TEXT)')
 | ---
 | - row_count: 1
 | ...
space = box.space.TEST
 | ---
 | ...
space:replace{1, 2, '3'}
 | ---
 | - [1, 2, '3']
 | ...
space:replace{4, 5, '6'}
 | ---
 | - [4, 5, '6']
 | ...
space:replace{7, 8.5, '9'}
 | ---
 | - [7, 8.5, '9']
 | ...
s = prepare("SELECT a FROM test WHERE b = '3';")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [2]
 | ...
execute(s.query_id)
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [2]
 | ...
s:execute()
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [2]
 | ...
s:execute()
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [2]
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

s = prepare("SELECT count(*), count(a - 3), max(b), abs(id) FROM test WHERE b = '3';")
 | ---
 | ...
execute(s.query_id)
 | ---
 | - metadata:
 |   - name: count(*)
 |     type: integer
 |   - name: count(a - 3)
 |     type: integer
 |   - name: max(b)
 |     type: scalar
 |   - name: abs(id)
 |     type: number
 |   rows:
 |   - [1, 1, '3', 1]
 | ...
execute(s.query_id)
 | ---
 | - metadata:
 |   - name: count(*)
 |     type: integer
 |   - name: count(a - 3)
 |     type: integer
 |   - name: max(b)
 |     type: scalar
 |   - name: abs(id)
 |     type: number
 |   rows:
 |   - [1, 1, '3', 1]
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

-- Let's try something a bit more complicated. For instance recursive
-- query displaying Mandelbrot set.
--
s = prepare([[WITH RECURSIVE \
                  xaxis(x) AS (VALUES(-2.0) UNION ALL SELECT x+0.05 FROM xaxis WHERE x<1.2), \
                  yaxis(y) AS (VALUES(-1.0) UNION ALL SELECT y+0.1 FROM yaxis WHERE y<1.0), \
                  m(iter, cx, cy, x, y) AS ( \
                      SELECT 0, x, y, 0.0, 0.0 FROM xaxis, yaxis \
                      UNION ALL \
                      SELECT iter+1, cx, cy, x*x-y*y + cx, 2.0*x*y + cy FROM m \
                          WHERE (x*x + y*y) < 4.0 AND iter<28), \
                      m2(iter, cx, cy) AS ( \
                          SELECT max(iter), cx, cy FROM m GROUP BY cx, cy), \
                      a(t) AS ( \
                          SELECT group_concat( substr(' .+*#', 1+LEAST(iter/7,4), 1), '') \
                              FROM m2 GROUP BY cy) \
                  SELECT group_concat(TRIM(TRAILING FROM t),x'0a') FROM a;]])
 | ---
 | ...

res = execute(s.query_id)
 | ---
 | ...
res.metadata
 | ---
 | - - name: group_concat(TRIM(TRAILING FROM t),x'0a')
 |     type: string
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

-- Workflow with bindings is still the same.
--
s = prepare("SELECT a FROM test WHERE b = ?;")
 | ---
 | ...
execute(s.query_id, {'6'})
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [5]
 | ...
execute(s.query_id, {'9'})
 | ---
 | - metadata:
 |   - name: A
 |     type: number
 |   rows:
 |   - [8.5]
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

-- DML
s = prepare("INSERT INTO test VALUES (?, ?, ?);")
 | ---
 | ...
execute(s.query_id, {5, 6, '7'})
 | ---
 | - row_count: 1
 | ...
execute(s.query_id, {6, 10, '7'})
 | ---
 | - row_count: 1
 | ...
execute(s.query_id, {9, 11, '7'})
 | ---
 | - row_count: 1
 | ...
unprepare(s.query_id)
 | ---
 | - null
 | ...

-- EXPLAIN and PRAGMA work fine as well.
--
s1 = prepare("EXPLAIN SELECT a FROM test WHERE b = '3';")
 | ---
 | ...
res = execute(s1.query_id)
 | ---
 | ...
res.metadata
 | ---
 | - - name: addr
 |     type: INTEGER
 |   - name: opcode
 |     type: TEXT
 |   - name: p1
 |     type: INTEGER
 |   - name: p2
 |     type: INTEGER
 |   - name: p3
 |     type: INTEGER
 |   - name: p4
 |     type: TEXT
 |   - name: p5
 |     type: TEXT
 |   - name: comment
 |     type: TEXT
 | ...
assert(res.rows ~= nil)
 | ---
 | - true
 | ...

s2 = prepare("EXPLAIN QUERY PLAN SELECT a FROM test WHERE b = '3';")
 | ---
 | ...
res = execute(s2.query_id)
 | ---
 | ...
res.metadata
 | ---
 | - - name: selectid
 |     type: INTEGER
 |   - name: order
 |     type: INTEGER
 |   - name: from
 |     type: INTEGER
 |   - name: detail
 |     type: TEXT
 | ...
assert(res.rows ~= nil)
 | ---
 | - true
 | ...

s3 = prepare("PRAGMA count_changes;")
 | ---
 | ...
execute(s3.query_id)
 | ---
 | - metadata:
 |   - name: defer_foreign_keys
 |     type: INTEGER
 |   rows:
 |   - [0]
 | ...

unprepare(s3.query_id)
 | ---
 | - null
 | ...
unprepare(s2.query_id)
 | ---
 | - null
 | ...
unprepare(s1.query_id)
 | ---
 | - null
 | ...

-- Make sure cache memory limit can't be exceeed. We have to
-- create separate fiber (in local mode) since cache is local
-- to session. After cache creation its size is fixed and can't
-- be reconfigured. Also test that ids in each session start from 0.
--
test_run:cmd("setopt delimiter ';'")
 | ---
 | - true
 | ...
box.cfg{sql_cache_size = 3000}
res = nil;
 | ---
 | ...
_ = fiber.create(function()
    s = prepare("SELECT * FROM test;")
    res = s.query_id
end);
 | ---
 | ...
while res == nil do fiber.sleep(0.00001) end;
 | ---
 | ...
assert(res == 0);
 | ---
 | - true
 | ...

ok = nil
res = nil
_ = fiber.create(function()
    for i = 1, 5 do
        pcall(prepare, "SELECT * FROM test;")
    end
    ok, res = pcall(prepare, "SELECT * FROM test;")
end);
 | ---
 | ...
while ok == nil do fiber.sleep(0.00001) end;
 | ---
 | ...
assert(ok == false);
 | ---
 | - true
 | ...
res;
 | ---
 | - 'Failed to prepare SQL statement: prepared statement cache is full'
 | ...

-- Make sure cache can be purged with box.session.sql_cache_erase()
--
res = nil;
 | ---
 | ...
ok = nil;
 | ---
 | ...
_ = fiber.create(function()
    for i = 1, 5 do
        pcall(prepare, "SELECT * FROM test;")
    end
    box.session.sql_cache_erase()
    ok, res = pcall(prepare, "SELECT * FROM test;")
end);
 | ---
 | ...
while ok == nil do fiber.sleep(0.00001) end;
 | ---
 | ...
assert(ok == true);
 | ---
 | - true
 | ...
assert(res ~= nil);
 | ---
 | - true
 | ...

test_run:cmd("setopt delimiter ''");
 | ---
 | - true
 | ...

box.space.TEST:drop()
 | ---
 | ...
