test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
replica_set = require('fast_replica')
---
...
box.schema.user.grant('guest', 'replication')
---
...
space = box.schema.space.create('test', {engine = engine});
---
...
index = box.space.test:create_index('primary')
---
...
replica_set.create(test_run, 'skip_conflict_row')
---
...
test_run:cmd("start server skip_conflict_row")
---
- true
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
box.cfg{replication_skip_conflict = true}
---
...
box.ctl.wait_rw() -- success
---
...
box.space.test:insert{1}
---
- [1]
...
test_run:cmd("switch default")
---
- true
...
space:insert{1, 1}
---
- [1, 1]
...
space:insert{2}
---
- [2]
...
test_run:wait_cond(function() return box.info.status == 'running' end) or box.info.status
---
- true
...
vclock = test_run:get_vclock('default')
---
...
_ = test_run:wait_vclock("skip_conflict_row", vclock)
---
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
box.info.replication[1].upstream.message
---
- null
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'follow' end) or box.info.replication[1].upstream.status
---
- true
...
box.space.test:select()
---
- - [1]
  - [2]
...
test_run:cmd("switch default")
---
- true
...
test_run:wait_cond(function() return box.info.status == 'running' end) or box.info.status
---
- true
...
-- gh-2283: test that if replication_skip_conflict is off vclock
-- is not advanced on errors.
test_run:cmd("restart server skip_conflict_row")
---
- true
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
box.space.test:insert{3}
---
- [3]
...
lsn1 = box.info.vclock[1]
---
...
test_run:cmd("switch default")
---
- true
...
box.space.test:insert{3, 3}
---
- [3, 3]
...
box.space.test:insert{4}
---
- [4]
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
-- lsn is not promoted
lsn1 == box.info.vclock[1]
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.message == "Duplicate key exists in unique index 'primary' in space 'test'" end) or box.info.replication[1].upstream.message
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'stopped' end) or box.info.replication[1].upstream.status
---
- true
...
test_run:cmd("switch default")
---
- true
...
test_run:cmd("restart server skip_conflict_row")
---
- true
...
-- applier is not in follow state
box.info.replication[1].upstream.message
---
- Duplicate key exists in unique index 'primary' in space 'test'
...
--
-- gh-3977: check that NOP is written instead of conflicting row.
--
replication = box.cfg.replication
---
...
box.cfg{replication_skip_conflict = true, replication = {}}
---
...
box.cfg{replication = replication}
---
...
test_run:cmd("switch default")
---
- true
...
-- test if nop were really written
box.space.test:truncate()
---
...
test_run:cmd("restart server skip_conflict_row")
---
- true
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'follow' end) or box.info.replication[1].upstream.status
---
- true
...
-- write some conflicting records on slave
for i = 1, 10 do box.space.test:insert({i, 'r'}) end
---
...
box.cfg{replication_skip_conflict = true}
---
...
v1 = box.info.vclock[1]
---
...
-- write some conflicting records on master
test_run:cmd("switch default")
---
- true
...
for i = 1, 10 do box.space.test:insert({i, 'm'}) end
---
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'follow' end) or box.info.replication[1].upstream.status
---
- true
...
-- lsn should be incremented
test_run:wait_cond(function() return v1 == box.info.vclock[1] - 10 end) or box.info.vclock[1]
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'follow' end) or box.info.replication[1].upstream.status
---
- true
...
-- restart server and check replication continues from nop-ed vclock
test_run:cmd("switch default")
---
- true
...
test_run:cmd("stop server skip_conflict_row")
---
- true
...
for i = 11, 20 do box.space.test:insert({i, 'm'}) end
---
...
test_run:cmd("start server skip_conflict_row")
---
- true
...
test_run:cmd("switch skip_conflict_row")
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'follow' end) or box.info.replication[1].upstream.status
---
- true
...
box.space.test:select({11}, {iterator = "GE"})
---
- - [11, 'm']
  - [12, 'm']
  - [13, 'm']
  - [14, 'm']
  - [15, 'm']
  - [16, 'm']
  - [17, 'm']
  - [18, 'm']
  - [19, 'm']
  - [20, 'm']
...
test_run:cmd("switch default")
---
- true
...
-- cleanup
replica_set.drop(test_run, 'skip_conflict_row')
---
- true
...
test_run:cleanup_cluster()
---
...
box.space.test:drop()
---
...
box.schema.user.revoke('guest', 'replication')
---
...
