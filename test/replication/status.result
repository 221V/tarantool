test_run = require('test_run').new()
---
...
test_run:cmd('restart server default with cleanup=1')
test_run:cmd('switch default')
---
- true
...
--
-- No replication
--
master_id = box.info.id
---
...
#box.info.vclock == 0
---
- true
...
#box.info.replication == 1
---
- true
...
box.space._cluster:count() == 1
---
- true
...
box.info.uuid == box.space._cluster:get(master_id)[2]
---
- true
...
-- LSN is nil until a first request is made
box.info.vclock[master_id] == nil
---
- true
...
--- box.info.lsn == box.info.vclock[master_id]
box.info.lsn == 0
---
- true
...
-- Make the first request
box.schema.user.grant('guest', 'replication')
---
...
-- LSN is 1 after the first request
#box.info.vclock == 1
---
- true
...
box.info.vclock[master_id] == 1
---
- true
...
box.info.lsn == box.info.vclock[master_id]
---
- true
...
master = box.info.replication[master_id]
---
...
master.id == master_id
---
- true
...
master.uuid == box.space._cluster:get(master_id)[2]
---
- true
...
master.lsn == box.info.vclock[master_id]
---
- true
...
master.upstream == nil
---
- true
...
master.downstream == nil
---
- true
...
-- Start Master -> Slave replication
replica_set = require('fast_replica')
---
...
replica_set.create(test_run, 'status')
---
...
test_run:cmd("start server status")
---
- true
...
--
-- Master
--
test_run:cmd('switch default')
---
- true
...
#box.info.vclock == 1 -- box.info.vclock[replica_id] is nil
---
- true
...
#box.info.replication == 2
---
- true
...
box.space._cluster:count() == 2
---
- true
...
-- master's status
master_id = box.info.id
---
...
box.info.vclock[master_id] == 2 -- grant + registration == 2
---
- true
...
box.info.lsn == box.info.vclock[master_id]
---
- true
...
master = box.info.replication[master_id]
---
...
master.id == master_id
---
- true
...
master.uuid == box.space._cluster:get(master_id)[2]
---
- true
...
master.lsn == box.info.vclock[master_id]
---
- true
...
master.upstream == nil
---
- true
...
master.downstream == nil
---
- true
...
-- replica's status
replica_id = test_run:get_server_id('status')
---
...
box.info.vclock[replica_id] == nil
---
- true
...
replica = box.info.replication[replica_id]
---
...
replica.id == replica_id
---
- true
...
replica.uuid == box.space._cluster:get(replica_id)[2]
---
- true
...
-- replica.lsn == box.info.vclock[replica_id]
replica.lsn == 0
---
- true
...
replica.upstream == nil
---
- true
...
replica.downstream.status == 'follow'
---
- true
...
replica.downstream.vclock[master_id] == box.info.vclock[master_id]
---
- true
...
replica.downstream.vclock[replica_id] == box.info.vclock[replica_id]
---
- true
...
--
-- Replica
--
test_run:cmd('switch status')
---
- true
...
#box.info.vclock == 1 -- box.info.vclock[replica_id] is nil
---
- true
...
#box.info.replication == 2
---
- true
...
box.space._cluster:count() == 2
---
- true
...
-- master's status
master_id = test_run:get_server_id('default')
---
...
box.info.vclock[master_id] == 2
---
- true
...
master = box.info.replication[master_id]
---
...
master.id == master_id
---
- true
...
master.uuid == box.space._cluster:get(master_id)[2]
---
- true
...
test_run:wait_cond(function() return master.upstream.status == 'follow' end) or master.upstream.status
---
- true
...
master.upstream.lag < 1
---
- true
...
master.upstream.idle < 1
---
- true
...
master.upstream.peer:match("unix/")
---
- unix/
...
master.downstream == nil
---
- true
...
-- replica's status
replica_id = box.info.id
---
...
box.info.vclock[replica_id] == nil
---
- true
...
-- box.info.lsn == box.info.vclock[replica_id]
box.info.lsn == 0
---
- true
...
replica = box.info.replication[replica_id]
---
...
replica.id == replica_id
---
- true
...
replica.uuid == box.space._cluster:get(replica_id)[2]
---
- true
...
-- replica.lsn == box.info.vclock[replica_id]
replica.lsn == 0
---
- true
...
replica.upstream == nil
---
- true
...
replica.downstream == nil
---
- true
...
--
-- ClientError during replication
--
test_run:cmd('switch status')
---
- true
...
box.space._schema:insert({'dup'})
---
- ['dup']
...
test_run:cmd('switch default')
---
- true
...
box.space._schema:insert({'dup'})
---
- ['dup']
...
test_run:cmd('switch status')
---
- true
...
test_run:wait_cond(function() return box.info.replication[1].upstream.status == 'stopped' and box.info.replication[1].upstream.message:match('Duplicate') ~= nil end)
---
- true
...
test_run:cmd('switch default')
---
- true
...
box.space._schema:delete({'dup'})
---
- ['dup']
...
test_run:cmd("push filter ', lsn: [0-9]+' to ', lsn: <number>'")
---
- true
...
test_run:grep_log('status', 'error applying row: .*')
---
- 'error applying row: {type: ''INSERT'', replica_id: 1, lsn: <number>, space_id: 272, index_id:
  0, tuple: ["dup"]}'
...
test_run:cmd("clear filter")
---
- true
...
--
-- Check box.info.replication login
--
test_run:cmd('switch status')
---
- true
...
test_run:cmd("set variable master_port to 'status.master'")
---
- true
...
replica_uri = os.getenv("LISTEN")
---
...
box.cfg{replication = {"guest@unix/:" .. master_port, replica_uri}}
---
...
master_id = test_run:get_server_id('default')
---
...
master = box.info.replication[master_id]
---
...
master.id == master_id
---
- true
...
master.upstream.status == "follow"
---
- false
...
master.upstream.peer:match("guest")
---
- guest
...
master.upstream.peer:match("unix/")
---
- unix/
...
master.downstream == nil
---
- true
...
test_run:cmd('switch default')
---
- true
...
--
-- Cleanup
--
box.schema.user.revoke('guest', 'replication')
---
...
replica_set.drop(test_run, 'status')
---
- true
...
test_run:cleanup_cluster()
---
...
