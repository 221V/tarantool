--
-- Check that replication applier invokes on_replace triggers
--
test_run = require('test_run').new()
---
...
fiber = require('fiber')
---
...
_ = box.schema.space.create('test')
---
...
_ = box.space.test:create_index('primary')
---
...
box.schema.user.grant('guest', 'replication')
---
...
test_run:cmd("create server on_replace with rpl_master=default, script='replication/replica.lua'")
---
- true
...
test_run:cmd("start server on_replace")
---
- true
...
test_run:cmd("switch on_replace")
---
- true
...
session_type = nil
---
...
--
-- gh-2642: box.session.type() in replication applier
--
_ = box.space.test:on_replace(function() session_type = box.session.type() end)
---
...
box.space.test:insert{1}
---
- [1]
...
--
-- console
--
session_type
---
- console
...
test_run:cmd("switch default")
---
- true
...
box.space.test:insert{2}
---
- [2]
...
test_run:cmd("switch on_replace")
---
- true
...
fiber = require('fiber')
---
...
while box.space.test:count() < 2 do fiber.sleep(0.01) end
---
...
--
-- applier
--
session_type
---
- applier
...
test_run:cmd("switch default")
---
- true
...
--
-- cleanup
--
test_run:cmd("stop server on_replace")
---
- true
...
test_run:cmd("cleanup server on_replace")
---
- true
...
test_run:cmd("delete server on_replace")
---
- true
...
test_run:cleanup_cluster()
---
...
box.space.test:drop()
---
...
box.schema.user.revoke('guest', 'replication')
---
...
-- gh-2798 on_replace on slave server with non-local data change should fail
SERVERS = { 'on_replace1', 'on_replace2' }
---
...
test_run:init_cluster(SERVERS, "replication", {args="0.2"})
---
...
test_run:cmd('switch on_replace1')
---
- true
...
fiber = require'fiber'
---
...
s1 = box.schema.space.create('s1')
---
...
_ = s1:create_index('pk')
---
...
s2 = box.schema.space.create('s2')
---
...
_ = s2:create_index('pk')
---
...
test_run:cmd('switch on_replace2')
---
- true
...
fiber = require'fiber'
---
...
while box.space.s2 == nil do fiber.sleep(0.00001) end
---
...
tg = box.space.s1:on_replace(function (old, new) box.space.s2:replace(new) end)
---
...
test_run:cmd('switch on_replace1')
---
- true
...
box.space.s1:replace({1, 2, 3, 4})
---
- [1, 2, 3, 4]
...
while (box.info.replication[3 - box.info.id].downstream.status ~= 'stopped') do fiber.sleep(0.00001) end
---
...
test_run:cmd('switch on_replace2')
---
- true
...
while (box.info.replication[3 - box.info.id].upstream.status ~= 'stopped') do fiber.sleep(0.00001) end
---
...
box.info.replication[3 - box.info.id].upstream.message
---
- Replication does not support distributed transactions
...
box.space.s1:select()
---
- []
...
box.space.s2:select()
---
- []
...
test_run:cmd('switch on_replace1')
---
- true
...
box.space.s1:select()
---
- - [1, 2, 3, 4]
...
box.space.s2:select()
---
- []
...
-- gh-2798 on_replace on slave server with local data change is allowed
test_run:cmd('switch on_replace2')
---
- true
...
s3 = box.schema.space.create('s3', {is_local = true})
---
...
_ = s3:create_index('pk')
---
...
tg = box.space.s1:on_replace(function (old, new) box.space.s3:replace(new) end, tg)
---
...
replication = box.cfg.replication
---
...
box.cfg{replication = {}}
---
...
box.cfg{replication = replication}
---
...
s3:select()
---
- - [1, 2, 3, 4]
...
_ = test_run:cmd('switch default')
---
...
test_run:drop_cluster(SERVERS)
---
...
test_run:cleanup_cluster()
---
...
